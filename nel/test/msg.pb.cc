// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pt {
class obj_addrDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<obj_addr> {
} _obj_addr_default_instance_;
class obj_serviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<obj_service> {
} _obj_service_default_instance_;
class req_serviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<req_service> {
} _req_service_default_instance_;
class rsp_serviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rsp_service> {
} _rsp_service_default_instance_;
class req_register_serviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<req_register_service> {
} _req_register_service_default_instance_;
class rsp_register_serviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<rsp_register_service> {
} _rsp_register_service_default_instance_;
class broadcast_register_serviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<broadcast_register_service> {
} _broadcast_register_service_default_instance_;

namespace protobuf_msg_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_addr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_addr, ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_addr, port_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_service, sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_service, sname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(obj_service, addrs_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_service, sid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_service, services_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register_service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(req_register_service, sid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_register_service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rsp_register_service, sid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_register_service, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(broadcast_register_service, service_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(obj_addr)},
  { 7, -1, sizeof(obj_service)},
  { 15, -1, sizeof(req_service)},
  { 21, -1, sizeof(rsp_service)},
  { 27, -1, sizeof(req_register_service)},
  { 33, -1, sizeof(rsp_register_service)},
  { 39, -1, sizeof(broadcast_register_service)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_obj_addr_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_obj_service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_req_register_service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_rsp_register_service_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_broadcast_register_service_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "msg.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace

void TableStruct::Shutdown() {
  _obj_addr_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _obj_service_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _req_service_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _rsp_service_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _req_register_service_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _rsp_register_service_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _broadcast_register_service_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _obj_addr_default_instance_.DefaultConstruct();
  _obj_service_default_instance_.DefaultConstruct();
  _req_service_default_instance_.DefaultConstruct();
  _rsp_service_default_instance_.DefaultConstruct();
  _req_register_service_default_instance_.DefaultConstruct();
  _rsp_register_service_default_instance_.DefaultConstruct();
  _broadcast_register_service_default_instance_.DefaultConstruct();
  _broadcast_register_service_default_instance_.get_mutable()->service_ = const_cast< ::pt::obj_service*>(
      ::pt::obj_service::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\tmsg.proto\022\002pt\"$\n\010obj_addr\022\n\n\002ip\030\001 \001(\t\022"
      "\014\n\004port\030\002 \001(\005\"F\n\013obj_service\022\013\n\003sid\030\001 \001("
      "\005\022\r\n\005sname\030\002 \001(\t\022\033\n\005addrs\030\003 \003(\0132\014.pt.obj"
      "_addr\"\032\n\013req_service\022\013\n\003sid\030\001 \001(\005\"0\n\013rsp"
      "_service\022!\n\010services\030\001 \003(\0132\017.pt.obj_serv"
      "ice\"#\n\024req_register_service\022\013\n\003sid\030\001 \001(\005"
      "\"#\n\024rsp_register_service\022\013\n\003sid\030\001 \001(\005\">\n"
      "\032broadcast_register_service\022 \n\007service\030\001"
      " \001(\0132\017.pt.obj_serviceb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 349);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "msg.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_msg_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int obj_addr::kIpFieldNumber;
const int obj_addr::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

obj_addr::obj_addr()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.obj_addr)
}
obj_addr::obj_addr(const obj_addr& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:pt.obj_addr)
}

void obj_addr::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
  _cached_size_ = 0;
}

obj_addr::~obj_addr() {
  // @@protoc_insertion_point(destructor:pt.obj_addr)
  SharedDtor();
}

void obj_addr::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void obj_addr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* obj_addr::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const obj_addr& obj_addr::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

obj_addr* obj_addr::New(::google::protobuf::Arena* arena) const {
  obj_addr* n = new obj_addr;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void obj_addr::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.obj_addr)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

bool obj_addr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.obj_addr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.obj_addr.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 port = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.obj_addr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.obj_addr)
  return false;
#undef DO_
}

void obj_addr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.obj_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_addr.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.obj_addr)
}

::google::protobuf::uint8* obj_addr::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.obj_addr)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_addr.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.obj_addr)
  return target;
}

size_t obj_addr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.obj_addr)
  size_t total_size = 0;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obj_addr::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.obj_addr)
  GOOGLE_DCHECK_NE(&from, this);
  const obj_addr* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const obj_addr>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.obj_addr)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.obj_addr)
    MergeFrom(*source);
  }
}

void obj_addr::MergeFrom(const obj_addr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.obj_addr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void obj_addr::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.obj_addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obj_addr::CopyFrom(const obj_addr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.obj_addr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_addr::IsInitialized() const {
  return true;
}

void obj_addr::Swap(obj_addr* other) {
  if (other == this) return;
  InternalSwap(other);
}
void obj_addr::InternalSwap(obj_addr* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata obj_addr::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// obj_addr

// string ip = 1;
void obj_addr::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& obj_addr::ip() const {
  // @@protoc_insertion_point(field_get:pt.obj_addr.ip)
  return ip_.GetNoArena();
}
void obj_addr::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_addr.ip)
}
#if LANG_CXX11
void obj_addr::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.obj_addr.ip)
}
#endif
void obj_addr::set_ip(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_addr.ip)
}
void obj_addr::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_addr.ip)
}
::std::string* obj_addr::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_addr.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* obj_addr::release_ip() {
  // @@protoc_insertion_point(field_release:pt.obj_addr.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void obj_addr::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_addr.ip)
}

// int32 port = 2;
void obj_addr::clear_port() {
  port_ = 0;
}
::google::protobuf::int32 obj_addr::port() const {
  // @@protoc_insertion_point(field_get:pt.obj_addr.port)
  return port_;
}
void obj_addr::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_addr.port)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int obj_service::kSidFieldNumber;
const int obj_service::kSnameFieldNumber;
const int obj_service::kAddrsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

obj_service::obj_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.obj_service)
}
obj_service::obj_service(const obj_service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      addrs_(from.addrs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sname().size() > 0) {
    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:pt.obj_service)
}

void obj_service::SharedCtor() {
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_ = 0;
  _cached_size_ = 0;
}

obj_service::~obj_service() {
  // @@protoc_insertion_point(destructor:pt.obj_service)
  SharedDtor();
}

void obj_service::SharedDtor() {
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void obj_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* obj_service::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const obj_service& obj_service::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

obj_service* obj_service::New(::google::protobuf::Arena* arena) const {
  obj_service* n = new obj_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void obj_service::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.obj_service)
  addrs_.Clear();
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sid_ = 0;
}

bool obj_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.obj_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sname = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "pt.obj_service.sname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .pt.obj_addr addrs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.obj_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.obj_service)
  return false;
#undef DO_
}

void obj_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.obj_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // string sname = 2;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_service.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sname(), output);
  }

  // repeated .pt.obj_addr addrs = 3;
  for (unsigned int i = 0, n = this->addrs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->addrs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.obj_service)
}

::google::protobuf::uint8* obj_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.obj_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // string sname = 2;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "pt.obj_service.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sname(), target);
  }

  // repeated .pt.obj_addr addrs = 3;
  for (unsigned int i = 0, n = this->addrs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->addrs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.obj_service)
  return target;
}

size_t obj_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.obj_service)
  size_t total_size = 0;

  // repeated .pt.obj_addr addrs = 3;
  {
    unsigned int count = this->addrs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addrs(i));
    }
  }

  // string sname = 2;
  if (this->sname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void obj_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.obj_service)
  GOOGLE_DCHECK_NE(&from, this);
  const obj_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const obj_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.obj_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.obj_service)
    MergeFrom(*source);
  }
}

void obj_service::MergeFrom(const obj_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.obj_service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addrs_.MergeFrom(from.addrs_);
  if (from.sname().size() > 0) {

    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void obj_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.obj_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void obj_service::CopyFrom(const obj_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.obj_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool obj_service::IsInitialized() const {
  return true;
}

void obj_service::Swap(obj_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void obj_service::InternalSwap(obj_service* other) {
  addrs_.InternalSwap(&other->addrs_);
  sname_.Swap(&other->sname_);
  std::swap(sid_, other->sid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata obj_service::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// obj_service

// int32 sid = 1;
void obj_service::clear_sid() {
  sid_ = 0;
}
::google::protobuf::int32 obj_service::sid() const {
  // @@protoc_insertion_point(field_get:pt.obj_service.sid)
  return sid_;
}
void obj_service::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:pt.obj_service.sid)
}

// string sname = 2;
void obj_service::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& obj_service::sname() const {
  // @@protoc_insertion_point(field_get:pt.obj_service.sname)
  return sname_.GetNoArena();
}
void obj_service::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:pt.obj_service.sname)
}
#if LANG_CXX11
void obj_service::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pt.obj_service.sname)
}
#endif
void obj_service::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pt.obj_service.sname)
}
void obj_service::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pt.obj_service.sname)
}
::std::string* obj_service::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:pt.obj_service.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* obj_service::release_sname() {
  // @@protoc_insertion_point(field_release:pt.obj_service.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void obj_service::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:pt.obj_service.sname)
}

// repeated .pt.obj_addr addrs = 3;
int obj_service::addrs_size() const {
  return addrs_.size();
}
void obj_service::clear_addrs() {
  addrs_.Clear();
}
const ::pt::obj_addr& obj_service::addrs(int index) const {
  // @@protoc_insertion_point(field_get:pt.obj_service.addrs)
  return addrs_.Get(index);
}
::pt::obj_addr* obj_service::mutable_addrs(int index) {
  // @@protoc_insertion_point(field_mutable:pt.obj_service.addrs)
  return addrs_.Mutable(index);
}
::pt::obj_addr* obj_service::add_addrs() {
  // @@protoc_insertion_point(field_add:pt.obj_service.addrs)
  return addrs_.Add();
}
::google::protobuf::RepeatedPtrField< ::pt::obj_addr >*
obj_service::mutable_addrs() {
  // @@protoc_insertion_point(field_mutable_list:pt.obj_service.addrs)
  return &addrs_;
}
const ::google::protobuf::RepeatedPtrField< ::pt::obj_addr >&
obj_service::addrs() const {
  // @@protoc_insertion_point(field_list:pt.obj_service.addrs)
  return addrs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_service::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_service::req_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.req_service)
}
req_service::req_service(const req_service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:pt.req_service)
}

void req_service::SharedCtor() {
  sid_ = 0;
  _cached_size_ = 0;
}

req_service::~req_service() {
  // @@protoc_insertion_point(destructor:pt.req_service)
  SharedDtor();
}

void req_service::SharedDtor() {
}

void req_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_service::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_service& req_service::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_service* req_service::New(::google::protobuf::Arena* arena) const {
  req_service* n = new req_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_service::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.req_service)
  sid_ = 0;
}

bool req_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.req_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.req_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.req_service)
  return false;
#undef DO_
}

void req_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.req_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.req_service)
}

::google::protobuf::uint8* req_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.req_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.req_service)
  return target;
}

size_t req_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.req_service)
  size_t total_size = 0;

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.req_service)
  GOOGLE_DCHECK_NE(&from, this);
  const req_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.req_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.req_service)
    MergeFrom(*source);
  }
}

void req_service::MergeFrom(const req_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.req_service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void req_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.req_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_service::CopyFrom(const req_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.req_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_service::IsInitialized() const {
  return true;
}

void req_service::Swap(req_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_service::InternalSwap(req_service* other) {
  std::swap(sid_, other->sid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_service::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_service

// int32 sid = 1;
void req_service::clear_sid() {
  sid_ = 0;
}
::google::protobuf::int32 req_service::sid() const {
  // @@protoc_insertion_point(field_get:pt.req_service.sid)
  return sid_;
}
void req_service::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:pt.req_service.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_service::kServicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_service::rsp_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.rsp_service)
}
rsp_service::rsp_service(const rsp_service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      services_(from.services_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pt.rsp_service)
}

void rsp_service::SharedCtor() {
  _cached_size_ = 0;
}

rsp_service::~rsp_service() {
  // @@protoc_insertion_point(destructor:pt.rsp_service)
  SharedDtor();
}

void rsp_service::SharedDtor() {
}

void rsp_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_service::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_service& rsp_service::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_service* rsp_service::New(::google::protobuf::Arena* arena) const {
  rsp_service* n = new rsp_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_service::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.rsp_service)
  services_.Clear();
}

bool rsp_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.rsp_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pt.obj_service services = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_services()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.rsp_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.rsp_service)
  return false;
#undef DO_
}

void rsp_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.rsp_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pt.obj_service services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->services(i), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.rsp_service)
}

::google::protobuf::uint8* rsp_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.rsp_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pt.obj_service services = 1;
  for (unsigned int i = 0, n = this->services_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->services(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.rsp_service)
  return target;
}

size_t rsp_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.rsp_service)
  size_t total_size = 0;

  // repeated .pt.obj_service services = 1;
  {
    unsigned int count = this->services_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->services(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.rsp_service)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.rsp_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.rsp_service)
    MergeFrom(*source);
  }
}

void rsp_service::MergeFrom(const rsp_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.rsp_service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  services_.MergeFrom(from.services_);
}

void rsp_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.rsp_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_service::CopyFrom(const rsp_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.rsp_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_service::IsInitialized() const {
  return true;
}

void rsp_service::Swap(rsp_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_service::InternalSwap(rsp_service* other) {
  services_.InternalSwap(&other->services_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_service::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_service

// repeated .pt.obj_service services = 1;
int rsp_service::services_size() const {
  return services_.size();
}
void rsp_service::clear_services() {
  services_.Clear();
}
const ::pt::obj_service& rsp_service::services(int index) const {
  // @@protoc_insertion_point(field_get:pt.rsp_service.services)
  return services_.Get(index);
}
::pt::obj_service* rsp_service::mutable_services(int index) {
  // @@protoc_insertion_point(field_mutable:pt.rsp_service.services)
  return services_.Mutable(index);
}
::pt::obj_service* rsp_service::add_services() {
  // @@protoc_insertion_point(field_add:pt.rsp_service.services)
  return services_.Add();
}
::google::protobuf::RepeatedPtrField< ::pt::obj_service >*
rsp_service::mutable_services() {
  // @@protoc_insertion_point(field_mutable_list:pt.rsp_service.services)
  return &services_;
}
const ::google::protobuf::RepeatedPtrField< ::pt::obj_service >&
rsp_service::services() const {
  // @@protoc_insertion_point(field_list:pt.rsp_service.services)
  return services_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int req_register_service::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

req_register_service::req_register_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.req_register_service)
}
req_register_service::req_register_service(const req_register_service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:pt.req_register_service)
}

void req_register_service::SharedCtor() {
  sid_ = 0;
  _cached_size_ = 0;
}

req_register_service::~req_register_service() {
  // @@protoc_insertion_point(destructor:pt.req_register_service)
  SharedDtor();
}

void req_register_service::SharedDtor() {
}

void req_register_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* req_register_service::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const req_register_service& req_register_service::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

req_register_service* req_register_service::New(::google::protobuf::Arena* arena) const {
  req_register_service* n = new req_register_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void req_register_service::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.req_register_service)
  sid_ = 0;
}

bool req_register_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.req_register_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.req_register_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.req_register_service)
  return false;
#undef DO_
}

void req_register_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.req_register_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.req_register_service)
}

::google::protobuf::uint8* req_register_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.req_register_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.req_register_service)
  return target;
}

size_t req_register_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.req_register_service)
  size_t total_size = 0;

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void req_register_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.req_register_service)
  GOOGLE_DCHECK_NE(&from, this);
  const req_register_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const req_register_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.req_register_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.req_register_service)
    MergeFrom(*source);
  }
}

void req_register_service::MergeFrom(const req_register_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.req_register_service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void req_register_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.req_register_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void req_register_service::CopyFrom(const req_register_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.req_register_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool req_register_service::IsInitialized() const {
  return true;
}

void req_register_service::Swap(req_register_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void req_register_service::InternalSwap(req_register_service* other) {
  std::swap(sid_, other->sid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata req_register_service::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// req_register_service

// int32 sid = 1;
void req_register_service::clear_sid() {
  sid_ = 0;
}
::google::protobuf::int32 req_register_service::sid() const {
  // @@protoc_insertion_point(field_get:pt.req_register_service.sid)
  return sid_;
}
void req_register_service::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:pt.req_register_service.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int rsp_register_service::kSidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

rsp_register_service::rsp_register_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.rsp_register_service)
}
rsp_register_service::rsp_register_service(const rsp_register_service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sid_ = from.sid_;
  // @@protoc_insertion_point(copy_constructor:pt.rsp_register_service)
}

void rsp_register_service::SharedCtor() {
  sid_ = 0;
  _cached_size_ = 0;
}

rsp_register_service::~rsp_register_service() {
  // @@protoc_insertion_point(destructor:pt.rsp_register_service)
  SharedDtor();
}

void rsp_register_service::SharedDtor() {
}

void rsp_register_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rsp_register_service::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const rsp_register_service& rsp_register_service::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

rsp_register_service* rsp_register_service::New(::google::protobuf::Arena* arena) const {
  rsp_register_service* n = new rsp_register_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void rsp_register_service::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.rsp_register_service)
  sid_ = 0;
}

bool rsp_register_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.rsp_register_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.rsp_register_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.rsp_register_service)
  return false;
#undef DO_
}

void rsp_register_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.rsp_register_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sid(), output);
  }

  // @@protoc_insertion_point(serialize_end:pt.rsp_register_service)
}

::google::protobuf::uint8* rsp_register_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.rsp_register_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sid = 1;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.rsp_register_service)
  return target;
}

size_t rsp_register_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.rsp_register_service)
  size_t total_size = 0;

  // int32 sid = 1;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rsp_register_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.rsp_register_service)
  GOOGLE_DCHECK_NE(&from, this);
  const rsp_register_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const rsp_register_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.rsp_register_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.rsp_register_service)
    MergeFrom(*source);
  }
}

void rsp_register_service::MergeFrom(const rsp_register_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.rsp_register_service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sid() != 0) {
    set_sid(from.sid());
  }
}

void rsp_register_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.rsp_register_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rsp_register_service::CopyFrom(const rsp_register_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.rsp_register_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rsp_register_service::IsInitialized() const {
  return true;
}

void rsp_register_service::Swap(rsp_register_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void rsp_register_service::InternalSwap(rsp_register_service* other) {
  std::swap(sid_, other->sid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata rsp_register_service::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// rsp_register_service

// int32 sid = 1;
void rsp_register_service::clear_sid() {
  sid_ = 0;
}
::google::protobuf::int32 rsp_register_service::sid() const {
  // @@protoc_insertion_point(field_get:pt.rsp_register_service.sid)
  return sid_;
}
void rsp_register_service::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:pt.rsp_register_service.sid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int broadcast_register_service::kServiceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

broadcast_register_service::broadcast_register_service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_msg_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:pt.broadcast_register_service)
}
broadcast_register_service::broadcast_register_service(const broadcast_register_service& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_service()) {
    service_ = new ::pt::obj_service(*from.service_);
  } else {
    service_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:pt.broadcast_register_service)
}

void broadcast_register_service::SharedCtor() {
  service_ = NULL;
  _cached_size_ = 0;
}

broadcast_register_service::~broadcast_register_service() {
  // @@protoc_insertion_point(destructor:pt.broadcast_register_service)
  SharedDtor();
}

void broadcast_register_service::SharedDtor() {
  if (this != internal_default_instance()) {
    delete service_;
  }
}

void broadcast_register_service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* broadcast_register_service::descriptor() {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const broadcast_register_service& broadcast_register_service::default_instance() {
  protobuf_msg_2eproto::InitDefaults();
  return *internal_default_instance();
}

broadcast_register_service* broadcast_register_service::New(::google::protobuf::Arena* arena) const {
  broadcast_register_service* n = new broadcast_register_service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void broadcast_register_service::Clear() {
// @@protoc_insertion_point(message_clear_start:pt.broadcast_register_service)
  if (GetArenaNoVirtual() == NULL && service_ != NULL) {
    delete service_;
  }
  service_ = NULL;
}

bool broadcast_register_service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pt.broadcast_register_service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .pt.obj_service service = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pt.broadcast_register_service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pt.broadcast_register_service)
  return false;
#undef DO_
}

void broadcast_register_service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pt.broadcast_register_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pt.obj_service service = 1;
  if (this->has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->service_, output);
  }

  // @@protoc_insertion_point(serialize_end:pt.broadcast_register_service)
}

::google::protobuf::uint8* broadcast_register_service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pt.broadcast_register_service)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pt.obj_service service = 1;
  if (this->has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->service_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:pt.broadcast_register_service)
  return target;
}

size_t broadcast_register_service::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pt.broadcast_register_service)
  size_t total_size = 0;

  // .pt.obj_service service = 1;
  if (this->has_service()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->service_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void broadcast_register_service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pt.broadcast_register_service)
  GOOGLE_DCHECK_NE(&from, this);
  const broadcast_register_service* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const broadcast_register_service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pt.broadcast_register_service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pt.broadcast_register_service)
    MergeFrom(*source);
  }
}

void broadcast_register_service::MergeFrom(const broadcast_register_service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pt.broadcast_register_service)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_service()) {
    mutable_service()->::pt::obj_service::MergeFrom(from.service());
  }
}

void broadcast_register_service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pt.broadcast_register_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void broadcast_register_service::CopyFrom(const broadcast_register_service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pt.broadcast_register_service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool broadcast_register_service::IsInitialized() const {
  return true;
}

void broadcast_register_service::Swap(broadcast_register_service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void broadcast_register_service::InternalSwap(broadcast_register_service* other) {
  std::swap(service_, other->service_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata broadcast_register_service::GetMetadata() const {
  protobuf_msg_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_msg_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// broadcast_register_service

// .pt.obj_service service = 1;
bool broadcast_register_service::has_service() const {
  return this != internal_default_instance() && service_ != NULL;
}
void broadcast_register_service::clear_service() {
  if (GetArenaNoVirtual() == NULL && service_ != NULL) delete service_;
  service_ = NULL;
}
const ::pt::obj_service& broadcast_register_service::service() const {
  // @@protoc_insertion_point(field_get:pt.broadcast_register_service.service)
  return service_ != NULL ? *service_
                         : *::pt::obj_service::internal_default_instance();
}
::pt::obj_service* broadcast_register_service::mutable_service() {
  
  if (service_ == NULL) {
    service_ = new ::pt::obj_service;
  }
  // @@protoc_insertion_point(field_mutable:pt.broadcast_register_service.service)
  return service_;
}
::pt::obj_service* broadcast_register_service::release_service() {
  // @@protoc_insertion_point(field_release:pt.broadcast_register_service.service)
  
  ::pt::obj_service* temp = service_;
  service_ = NULL;
  return temp;
}
void broadcast_register_service::set_allocated_service(::pt::obj_service* service) {
  delete service_;
  service_ = service;
  if (service) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:pt.broadcast_register_service.service)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace pt

// @@protoc_insertion_point(global_scope)
